name: Deploy to Hetzner
on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build and push frontend
      - name: Build Frontend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/cistl-frontend:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/cistl-frontend:latest
          cache-to: type=inline
          platforms: linux/amd64
          build-args: |
            NODE_ENV=production

      # Build and push backend
      - name: Build Backend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/cistl-backend:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/cistl-backend:latest
          cache-to: type=inline
          platforms: linux/amd64
          build-args: |
            GO_ENV=production

      # Deploy everything using docker-compose
      - name: SSH into Hetzner and deploy
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.HETZNER_IP }}
          username: ${{ secrets.HETZNER_SSH_USER }}
          key: ${{ secrets.HETZNER_SSH_PRIVATE_KEY }}
          port: 22
          script: |
            echo ${{ secrets.DOCKER_PASSWORD }} | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin
            
            # Create production docker-compose file if it doesn't exist
            cat > docker-compose.prod.yml << 'EOL'
            version: '3'
            services:
              frontend:
                image: ${{ secrets.DOCKER_USERNAME }}/cistl-frontend:latest
                restart: always
                environment:
                  - NODE_ENV=production
                  - NEXT_PUBLIC_API_URL=/api
                ports:
                  - "3000:3000"
              
              backend:
                image: ${{ secrets.DOCKER_USERNAME }}/cistl-backend:latest
                restart: always
                environment:
                  - GO_ENV=production
                expose:
                  - "8080"
              
              nginx:
                image: nginx:alpine
                restart: always
                ports:
                  - "80:80"
                volumes:
                  - ./nginx.conf:/etc/nginx/conf.d/default.conf
                depends_on:
                  - frontend
                  - backend
            EOL
            
            # Create nginx configuration if it doesn't exist
            cat > nginx.conf << 'EOL'
            server {
                listen 80;
                
                location / {
                    proxy_pass http://frontend:3000;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                }
                
                location /api/ {
                    proxy_pass http://backend:8080;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                }
            }
            EOL
            
            # Pull the latest images and restart
            docker compose -f docker-compose.prod.yml pull
            docker compose -f docker-compose.prod.yml down
            docker compose -f docker-compose.prod.yml up -d
            
            # Clean up unused images
            docker image prune -af